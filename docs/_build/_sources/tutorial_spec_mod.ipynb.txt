{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial: `spec_mod`\n",
    "\n",
    "## Sample data\n",
    "Sample imagery captured from a [Resonon](https://resonon.com/) Pika II VIS-NIR line scanning imager and ancillary sample files can be downloaded from this [link](https://drive.google.com/drive/folders/1KpOBB4-qghedVFd8ukQngXNwUit8PFy_?usp=sharing).\n",
    "\n",
    "Before trying this tutorial on your own machine, please download the [sample files](https://drive.google.com/drive/folders/1KpOBB4-qghedVFd8ukQngXNwUit8PFy_?usp=sharing) and place into a local directory of your choosing (and do not change the file names). Indicate the location of your sample files by modifying `data_dir`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = r'F:\\\\nigo0024\\Documents\\hs_process_demo'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "## Confirm your environment\n",
    "\n",
    "Before trying the tutorials, be sure `hs_process` and its dependencies are [properly installed](installation.html#). If you installed in a *virtual environment*, first check we are indeed using the Python instance that was installed with the virtual environment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python install location: C:\\Users\\nigo0024\\AppData\\Local\\Continuum\\anaconda3\\envs\\spec\\python.exe\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "\n",
    "print('Python install location: {0}'.format(sys.executable))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *spec* folder that contains `python.exe` tells me that the activated Python instance is indeed in the `spec` environment, just as I intend. If you created a virtual environment, but your `python.exe` is not in the `envs\\spec` directory, you either did not properly create your virtual environment or you are not pointing to the correct Python installation in your IDE (e.g., Spyder, Jupyter notebook, etc.).  \n",
    "\n",
    "***\n",
    "\n",
    "## `spec_mod.load_spyfile`\n",
    "Loads a `SpyFile` (Spectral Python object) for data access and/or manipulation by the `hstools` class. [[API]](api/hs_process.spec_mod.html#hs_process.spec_mod.load_spyfile)\n",
    "\n",
    "Load and initialize the `hsio` and `spec_mod` modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from hs_process import hsio\n",
    "from hs_process import spec_mod\n",
    "\n",
    "fname_in = os.path.join(data_dir, 'Wells_rep2_20180628_16h56m_pika_gige_7-Radiance Conversion-Georectify Airborne Datacube-Convert Radiance Cube to Reflectance from Measured Reference Spectrum.bip.hdr')\n",
    "io = hsio(fname_in)\n",
    "my_spec_mod = spec_mod(io.spyfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load datacube using ``spec_mod.load_spyfile``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\tData Source:   'F:\\\\nigo0024\\Documents\\hs_process_demo\\Wells_rep2_20180628_16h56m_pika_gige_7-Radiance Conversion-Georectify Airborne Datacube-Convert Radiance Cube to Reflectance from Measured Reference Spectrum.bip'\n",
       "\t# Rows:            617\n",
       "\t# Samples:        1300\n",
       "\t# Bands:           240\n",
       "\tInterleave:        BIP\n",
       "\tQuantization:  32 bits\n",
       "\tData format:   float32"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_spec_mod.load_spyfile(io.spyfile)\n",
    "my_spec_mod.spyfile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "## `spec_mod.spectral_clip`\n",
    "Removes/clips designated wavelength bands from the hyperspectral datacube. [[API]](api/hs_process.spec_mod.html#hs_process.spec_mod.spectral_clip)\n",
    "\n",
    "Load and initialize the `hsio` and `spec_mod` modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from hs_process import hsio\n",
    "from hs_process import spec_mod\n",
    "\n",
    "fname_hdr = os.path.join(data_dir, 'Wells_rep2_20180628_16h56m_pika_gige_7-Radiance Conversion-Georectify Airborne Datacube-Convert Radiance Cube to Reflectance from Measured Reference Spectrum.bip.hdr')\n",
    "io1 = hsio()\n",
    "io1.read_cube(fname_hdr)\n",
    "my_spec_mod = spec_mod(io1.spyfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using `spec_mod.spectral_clip`, clip all spectral bands below *420 nm* and above *880 nm*, as well as the bands near the oxygen absorption (i.e., *760-776 nm*) and water absorption (i.e., *813-827 nm*) regions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "array_clip, metadata = my_spec_mod.spectral_clip(wl_bands=[[0, 420], [760, 776], [813, 827], [880, 1000]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save the clipped datacube"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving F:\\nigo0024\\Documents\\hs_process_demo\\spec_mod\\Wells_rep2_20180628_16h56m_pika_gige_7-clip.bip\n"
     ]
    }
   ],
   "source": [
    "fname_hdr_clip = os.path.join(data_dir, 'spec_mod', 'Wells_rep2_20180628_16h56m_pika_gige_7-clip.bip.hdr')\n",
    "if not os.path.isdir(os.path.dirname(fname_hdr_clip)):  # create a new folder named \"spec_mod\" if it does not exist\n",
    "    os.mkdir(os.path.dirname(fname_hdr_clip))\n",
    "\n",
    "io1.write_cube(fname_hdr_clip, array_clip, metadata)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initialize a second instance of `hsio` and read in the clipped cube to compare the clipped cube to the unclipped cube"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\tData Source:   'F:\\\\nigo0024\\Documents\\hs_process_demo\\Wells_rep2_20180628_16h56m_pika_gige_7-Radiance Conversion-Georectify Airborne Datacube-Convert Radiance Cube to Reflectance from Measured Reference Spectrum.bip'\n",
       "\t# Rows:            617\n",
       "\t# Samples:        1300\n",
       "\t# Bands:           240\n",
       "\tInterleave:        BIP\n",
       "\tQuantization:  32 bits\n",
       "\tData format:   float32"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "io2 = hsio()  # initialize a second instance to compare cubes\n",
    "io2.read_cube(fname_hdr_clip)\n",
    "io1.spyfile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The unclipped cube (above) has 240 spectral bands, while the clipped cube (below) has 210."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\tData Source:   'F:\\\\nigo0024\\Documents\\hs_process_demo\\spec_mod\\Wells_rep2_20180628_16h56m_pika_gige_7-clip.bip'\n",
       "\t# Rows:            617\n",
       "\t# Samples:        1300\n",
       "\t# Bands:           210\n",
       "\tInterleave:        BIP\n",
       "\tQuantization:  32 bits\n",
       "\tData format:   float32"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "io2.spyfile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "## `spec_mod.spectral_smooth`\n",
    "Performs Savitzky-Golay smoothing on the spectral domain. [[API]](api/hs_process.spec_mod.html#hs_process.spec_mod.spectral_smooth)\n",
    "\n",
    "Load and initialize the `hsio` and `spec_mod` modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from hs_process import hsio\n",
    "from hs_process import spec_mod\n",
    "\n",
    "fname_hdr = os.path.join(data_dir, 'Wells_rep2_20180628_16h56m_pika_gige_7-Radiance Conversion-Georectify Airborne Datacube-Convert Radiance Cube to Reflectance from Measured Reference Spectrum.bip.hdr')\n",
    "io = hsio()\n",
    "io.read_cube(fname_hdr)\n",
    "my_spec_mod = spec_mod(io.spyfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use `spec_mod.spectral_smooth` to perform a *Savitzky-Golay* smoothing operation across the hyperspectral spectral signature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "array_smooth, metadata = my_spec_mod.spectral_smooth(window_size=11, order=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save the smoothed datacube using `hsio.write_cube`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving F:\\nigo0024\\Documents\\hs_process_demo\\spec_mod\\Wells_rep2_20180628_16h56m_pika_gige_7-smooth.bip\n"
     ]
    }
   ],
   "source": [
    "fname_hdr_smooth = os.path.join(data_dir, 'spec_mod', 'Wells_rep2_20180628_16h56m_pika_gige_7-smooth.bip.hdr')\n",
    "io.write_cube(fname_hdr_smooth, array_smooth, metadata)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Open smoothed datacube in Spectronon software to visualize the result of the smoothing for a specific pixel. Before smoothing (the spectral curve of the pixel at the *800th column/sample* and *200th row/line* is plotted):\n",
    "![spectral_smooth_before](../.././docs/source/img/spec_mod/spectral_smooth_before.png)\n",
    "\n",
    "And after smoothing (the spectral curve of the pixel at the *800th column/sample* and *200th row/line* is plotted):\n",
    "![spectral_smooth_after](../.././docs/source/img/spec_mod/spectral_smooth_after.png) "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
