{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup and Installation\n",
    "### Overview\n",
    "\n",
    "`hs_process` is an open-source Python package for processing and manipulating aerial hyperspectral imagery. The purpose of this  tutorial is to demonstrate the proper setup of your Python environment, install required dependencies, and verify that the installation was successful.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### System Requirements\n",
    "\n",
    "`hs_process` was developed using Python 3 (on Windows 10 OS), so it is recommended to install and use Python 3. This tutorial has only been tested on Windows. It will likely work on other major platforms (i.e., Windows, Linux, Mac), but you will have to be sure to get the required dependencies installed and working on your own.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Software and Libraries\n",
    "\n",
    "The following software and libraries are required to leverage the full API of `hs_process`:\n",
    "\n",
    "#### Software\n",
    "\n",
    "* [Python 3](https://www.python.org/downloads/)\n",
    "* [GDAL]()\n",
    "\n",
    "#### Libraries\n",
    "* [Spectral Python](http://www.spectralpython.net/index.html \"Spectral Python\")\n",
    "* [GDAL](https://pypi.org/project/GDAL/ \"GDAL\")\n",
    "* [Geopandas](http://geopandas.org/ \"Geopandas\")\n",
    "* [\\*Matplotlib](http://matplotlib.org/ \"Matplotlib\")\n",
    "* [\\*NumPy](http://www.numpy.org/ \"Numpy\")\n",
    "* [\\*Pandas](http://pandas.pydata.org/ \"Pandas\")\n",
    "* [\\*Seaborn](https://seaborn.pydata.org/ \"Seaborn\") (if only for visualizing data in the API examples)\n",
    "\n",
    "***\n",
    "\n",
    "### Dependencies\n",
    "\n",
    "`hs_process` requires the following packages:\n",
    "\n",
    "* [Spectral Python](http://www.spectralpython.net/index.html \"Spectral Python\")\n",
    "* [Geopandas](http://geopandas.org/ \"Geopandas\")\n",
    "* [GDAL](https://pypi.org/project/GDAL/ \"GDAL\")\n",
    "* [Rasterio](https://rasterio.readthedocs.io/en/latest/ \"Rasterio\")\n",
    "* [\\*Matplotlib](http://matplotlib.org/ \"Matplotlib\")\n",
    "* [\\*NumPy](http://www.numpy.org/ \"Numpy\")\n",
    "* [\\*Pandas](http://pandas.pydata.org/ \"Pandas\")\n",
    "* [\\*Seaborn](https://seaborn.pydata.org/ \"Seaborn\") (if only for visualizing data in the API examples)\n",
    "\n",
    "*The denoted dependencies should come pre-installed on [Anaconda](https://www.anaconda.com/). The others ([Spectral Python](http://www.spectralpython.net/index.html), [Geopandas](http://geopandas.org/), and [Rasterio](https://rasterio.readthedocs.io/en/latest/)) should install during a `pip install hs_process`.\n",
    "\n",
    "***\n",
    "\n",
    "### Install Python\n",
    "There are many ways to download and install Python. As a scientist, my recommendation is definitely through the [Anaconda distribution](https://www.anaconda.com/distribution/#download-section). Anaconda will have the more popular packages already installed in your Python environment, and it comes with [Spyder](https://www.spyder-ide.org/) and [Jupyter notebooks](https://jupyter.org/). Spyder and Jupyter make working with Python quite easy.\n",
    "\n",
    "Although I hope you'll find `hs_process` rather straightforward, it will probably be tricky if you have limited coding experience, particularly in the Python language. You may find it to your benefit to have a Python refresher before using `hs_proces`. If you're a beginner, it will be helpful to read the [Python Tutorial](https://docs.python.org/3/tutorial/) and/or get some hands-on practice with [this Python Tutorial by w3Schools](https://www.w3schools.com/python/).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Windows Setup\n",
    "\n",
    "### Install Python\n",
    "There are many ways to download and install Python. The [Anaconda distribution](https://www.anaconda.com/distribution/#download-section) is recommended becuase it can simplify the installation of package dependencies and streamlines the process of setting up the virtual environment. Anaconda also comes with [Spyder](https://www.spyder-ide.org/) and [Jupyter notebooks](https://jupyter.org/), each of which make working with Python quite easy.\n",
    "\n",
    "Download and install **Python 3.7** via [Anaconda](https://www.anaconda.com/distribution/#download-section). When installing, choose _**install for only me**_ instead of *install for all users*, as this simplifies insallation of package dependencies.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting up the Python environment (three options)\n",
    "A *Python environment* refers to the ecosystem consisting of a particular installed version of [Python](https://www.python.org/), as well as any third-party packages it has access to. In Python, every time a package is installed (e.g., `pip install some_third_party_package`, `conda install -c conda-forge some_third_party_package`, etc.), your Python environment is gaining functionality that builds upon the [Python Standard Library](https://docs.python.org/3/library/).\n",
    "\n",
    "This is great because the possibilities of what can be accomplished using Python is virtually limitless. Ideally, the list of packages in a given environment should only include those required by the package we intend to use (e.g., `hs_process` in this case), and not any package that has ever been installed by the user (this can be dozens or even hundreds of packages). A downside with too many packages is that it is inefficient to share your environment with someone else that would like to use the program. As time goes on, there may also be compatibility issues among package dependencies and your code that can be avoided by creating a tidy little Python environment for your project.\n",
    "\n",
    "There are a few ways to go about setting up a new environment and getting the dependencies installed. In this tutorial, there are three options provided with instructions. Please choose one of the three options.\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### [Option 1] Setting up the Python environment using the cloned *.yml* file (recommended)\n",
    "With [Anaconda](https://www.anaconda.com/distribution/#download-section) installed, the most streamlined approach is to create a new virtual environment via a clone of the complete working environment to run `hs_process`. This requires that you download the .yml file from the [`hs_process` Github repository](https://github.com/tnigon/hs_process/blob/master/env/spec-environment.yml).\n",
    "\n",
    "##### 1.a. Download *hs_process-environment.yml* from Github\n",
    "If [Git](https://git-scm.com/downloads) is already installed on your system, you can clone the `hs_process` repository into your local directory using the command line:\n",
    "`git clone https://github.com/tnigon/hs_process.git`\n",
    "\n",
    "Otherwise, you can always download the `hs_process` repository as a .zip file and unpack it into your local directory.\n",
    "\n",
    "##### 1.b. Create the environment\n",
    "Open an Anaconda console from the start menu as an administrator by clicking `Start->Anaconda`, right-click `Anaconda Console`, and choose to `Run as Administrator`. In the `Anaconda Console`, execute the following commands:\n",
    "\n",
    "1. `cd` to the local directory that contains the *hs_process-environment.yml* file (e.g., `cd Documents\\Github\\hs_process\\env`).\n",
    "2. `conda env create --name spec --file hs_process-environment.yml`. This will configure an Anaconda environment named _**spec**_ with all of the required tools and libraries. This process will take some time, depending on your computer and internet speeds (5-15 minutes is common).\n",
    "3. `conda activate spec` to activate the newly configured environment. **Important**: Anytime you want to use `hs_process`, be sure to run `conda activate spec` prior to opening your Python IDE (e.g. *Spyder*, *Jupyter Notebook*, etc.).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### [Option 2] Setting up the Python environment using *requirements.txt* file\n",
    "The required packages can also be installed via the [*requirements.txt*](https://github.com/tnigon/hs_process/blob/master/env/requirements.txt) file. Similar to the *.yml approach* ([Option 1]() above), this approach requires that you download the [*requirements.txt*](https://github.com/tnigon/hs_process/blob/master/env/requirements.txt) file from the [`hs_process` Github repository](https://github.com/tnigon/hs_process/blob/master/env/spec-environment.yml).\n",
    "\n",
    "##### 2.a. Download *requirements.txt* from Github\n",
    "If [Git](https://git-scm.com/downloads) is already installed on your system, you can clone the `hs_process` repository into your local directory using the command line:\n",
    "`git clone https://github.com/tnigon/hs_process.git`\n",
    "\n",
    "Otherwise, you can always download the `hs_process` repository as a .zip file and unpack it into your local directory.\n",
    "\n",
    "##### 2.b. Create the environment (optional)\n",
    "With [Anaconda](https://www.anaconda.com/distribution/#download-section) installed, it is first recommended (but not required) to create a new **Python 3.7** environment before installing package dependencies. Open an Anaconda console from the start menu as an administrator by clicking `Start->Anaconda`, right-click `Anaconda Console`, and choose to `Run as Administrator`. In the `Anaconda Console`, execute the following commands:\n",
    "\n",
    "1. `cd` to the local directory that contains the *requirements.txt* file (e.g., `cd Documents\\Github\\hs_process\\env`).\n",
    "2. `conda create -n spec python=3.7` to create an Anaconda **Python 3.7** environment named _**spec**_.\n",
    "3. `conda activate spec` to activate the newly configured environment. **Important**: Anytime you want to use `hs_process`, be sure to run `conda activate spec` prior to opening your Python IDE (e.g. *Spyder*, *Jupyter Notebook*, etc.).\n",
    "\n",
    "##### 2.c. Install [GeoPandas](http://geopandas.org/install.html) and [Fiona](https://fiona.readthedocs.io/en/latest/index.html) via Anaconda\n",
    "[GeoPandas](http://geopandas.org/install.html) has a dependency on [Fiona](https://fiona.readthedocs.io/en/latest/index.html), and because of some nuances with the [pip version of Fiona*](https://pypi.org/project/Fiona/), [GeoPandas](https://anaconda.org/conda-forge/geopandas) **MUST** be installed via Anaconda on Windows OS.\n",
    "\n",
    "*During installation, the pip version of [Fiona](https://pypi.org/project/Fiona/) requires that it is able to discover the locations of header files and libraries needed to compile its C extnesions, and these must be provided by the user when installing on Windows. For more information on this behavior, please refer to the [Fiona documentation](https://fiona.readthedocs.io/en/latest/README.html#windows).\n",
    "\n",
    "\n",
    "##### 2.c. Install package dependencies via *requirements.txt*\n",
    "In the `Anaconda Console`, execute the following commands:\n",
    "\n",
    "1. `cd` to the local directory that contains the *hs_process-environment.yml* file (e.g., `cd Documents\\Github\\hs_process\\env`).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### [Option 3] Installing `hs_process` via PyPI (not generally recommended)\n",
    "One of the dependancies of `hs_process` cannot be easily installed using the `pip` command. If you'd rather not install dependencies via the *.yml* or *requirements.txt* approaches (Options 1 and 2 above), then they can be installed while `hs_process` is being installed via the `pip` command. However, Anaconda **MUST** still be used to install the *GeoPandas* and *Fiona* dependencies (see below).\n",
    "\n",
    "##### 3.a. Create the environment (optional)\n",
    "With [Anaconda](https://www.anaconda.com/distribution/#download-section) installed, it is first recommended (but not required) to create a new **Python 3.7** environment before installing package dependencies. Open an Anaconda console from the start menu as an administrator by clicking `Start->Anaconda`, right-click `Anaconda Console`, and choose to `Run as Administrator`. In the `Anaconda Console`, execute the following commands:\n",
    "\n",
    "1. `cd` to the local directory that contains the *requirements.txt* file (e.g., `cd Documents\\Github\\hs_process\\env`).\n",
    "2. `conda create -n spec python=3.7` to create an Anaconda **Python 3.7** environment named _**spec**_.\n",
    "3. `conda activate spec` to activate the newly configured environment. **Important**: Anytime you want to use `hs_process`, be sure to run `conda activate spec` prior to opening your Python IDE (e.g. *Spyder*, *Jupyter Notebook*, etc.).\n",
    "\n",
    "##### 3.b. Install [GeoPandas](http://geopandas.org/install.html) and [Fiona](https://fiona.readthedocs.io/en/latest/index.html) via Anaconda\n",
    "[GeoPandas](http://geopandas.org/install.html) has a dependency on [Fiona](https://fiona.readthedocs.io/en/latest/index.html), and because of some nuances with the [pip version of Fiona*](https://pypi.org/project/Fiona/), [GeoPandas](https://anaconda.org/conda-forge/geopandas) **MUST** be installed via Anaconda on Windows OS.\n",
    "\n",
    "4. [`conda install -c conda-forge geopandas`](https://anaconda.org/conda-forge/geopandas) can be run to install both *GeoPandas* and *fiona*. Because *GeoPandas* has a [fiona dependency](http://geopandas.org/install.html#dependencies), this command will also install fiona.\n",
    "5. [`pip install hs_process`](https://pypi.org/project/hs_process/) can be \n",
    "\n",
    "*During installation, the pip version of [Fiona](https://pypi.org/project/Fiona/) requires that it is able to discover the locations of header files and libraries needed to compile its C extnesions, and these must be provided by the user when installing on Windows. For more information on this behavior, please refer to the [Fiona documentation](https://fiona.readthedocs.io/en/latest/README.html#windows).\n",
    "\n",
    "\n",
    "##### 2.c. Install package dependencies via *requirements.txt*\n",
    "In the `Anaconda Console`, execute the following commands:\n",
    "\n",
    "1. `cd` to the local directory that contains the *hs_process-environment.yml* file (e.g., `cd Documents\\Github\\hs_process\\env`).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### [Option 3] Setting up the Python environment manually\n",
    "The required packages can also be installed on your own. With [Anaconda](https://www.anaconda.com/distribution/#download-section) installed, it is first recommended to create a new Python 3.7 environment before installing package dependencies.\n",
    "\n",
    "##### 3.a. Create the environment (optional)\n",
    "With [Anaconda](https://www.anaconda.com/distribution/#download-section) installed, it is first recommended (but not required) to create a new **Python 3.7** environment before installing package dependencies. Open an Anaconda console from the start menu as an administrator by clicking `Start->Anaconda`, right-click `Anaconda Console`, and choose to `Run as Administrator`. In the `Anaconda Console`, execute the following commands:\n",
    "\n",
    "1. `conda create -n spec python=3.7` to create an Anaconda **Python 3.7** environment named _**spec**_.\n",
    "2. `conda activate spec` to activate the newly configured environment. **Important**: Anytime you want to use `hs_process`, be sure to run `conda activate spec` prior to opening your Python IDE (e.g. *Spyder*, *Jupyter Notebook*, etc.).\n",
    "\n",
    "##### 3.b. Install package dependencies\n",
    "Although `pip install hs_process` will install package dependencies available on [PyPI](https://pypi.org/), it is not generally recommended to install a package via `pip` if that package exists in the [Anaconda Package Repository](https://anaconda.org/anaconda/repo). Therefore, all the required dependencies available in the [Anaconda Package Repository](https://anaconda.org/anaconda/repo) should be installed via the `conda install` command. In the `Anaconda Console`, execute the following commands:\n",
    "3. [`conda install -c conda-forge gdal`](https://anaconda.org/conda-forge/gdal)\n",
    "4. [`conda install -c conda-forge geopandas`](https://anaconda.org/conda-forge/geopandas)\n",
    "5. [`conda install -c conda-forge numpy`](https://anaconda.org/conda-forge/numpy)\n",
    "6. [`conda install -c conda-forge pandas`](https://anaconda.org/conda-forge/pandas)\n",
    "7. [`conda install -c conda-forge seaborn`](https://anaconda.org/conda-forge/seaborn)\n",
    "8. [`conda install -c conda-forge matplotlib`](https://anaconda.org/conda-forge/matplotlib)\n",
    "9. [`conda install -c conda-forge shapely`](https://anaconda.org/conda-forge/shapely)\n",
    "10. [`conda install -c conda-forge spectral`](https://anaconda.org/conda-forge/spectral)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Install hs_process\n",
    "To install the latest release of `hs_process`, you can use [pip](https://pypi.org/project/pip/):\n",
    "\n",
    "\tpip install hs_process\n",
    "\n",
    "Alternatively, you can use [pip](https://pypi.org/project/pip/) to install the development version directly from github:\n",
    "\n",
    "\tpip install git+https://github.com/tnigon/hs_process\n",
    "\n",
    "Another option is to clone the github repository and install from your local copy. After navigating to the directory of your local copy:\n",
    "\n",
    "\tpip install .\n",
    "\n",
    "The recommended folder directory for the `hs_process` package is in the site-packages folder in your Python Path (alongside all other Python packages).\n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
